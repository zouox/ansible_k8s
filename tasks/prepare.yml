---
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Set hosts hostnames
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: "{{ item.strategy }}"
  when:
    - item.test
    - set_hostnames
  loop:
    - test: ansible_os_family == "RedHat"
      strategy: systemd
    - test: ansible_os_family == "Debian"
      strategy: debian

- name: Set /etc/hosts to reflect hostnames
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item].ansible_host }}\t{{ item }}"
  loop: "{{ groups.all }}" 

- name: Disable swap
  ansible.builtin.shell: |
    swapoff -a

- name: Disable swap in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Disable firewalld
  ansible.builtin.systemd_service:
    name: firewalld
    enabled: false
    state: stopped
  when:
    - ansible_os_family == "RedHat"
    - ansible_facts.services['firewalld'] is defined

- name: Set SELinux in permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_os_family == "RedHat"

- name: Activate overlay and br_netfilter kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop:
    - overlay
    - br_netfilter

- name: Add sysctls for kubelet
  ansible.posix.sysctl:
    name: "{{ item.sysctl }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop: 
    - sysctl: net.ipv4.ip_forward
      value: 1
    - sysctl: net.bridge.bridge-nf-call-iptables
      value: 1
    - sysctl: net.bridge.bridge-nf-call-ip6tables
      value: 1
    - sysctl: vm.overcommit_memory
      value: 1
    - sysctl: kernel.panic
      value: 10
    - sysctl: kernel.panic_on_oops
      value: 1

- name: Disable nm-cloud-setup service if applicable
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop:
    - nm-cloud-setup.service
    - nm-cloud-setup.timer
  when:
    - ansible_facts.services['nm-cloud-setup'] is defined

- name: Update repository cache
  ansible.builtin.apt:
    update_cache: yes
  when:
    - ansible_os_family == "Debian"

- name: Install dependencies
  ansible.builtin.package:
    name:
      - ca-certificates
      - curl
      - iproute-tc
      - pip
      - jq
    state: present

- name: Install Kubernetes Python module
  ansible.builtin.pip:
    name: kubernetes

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    owner: root
    group: root
    mode: '0755'
    state: directory
  when:
    - ansible_os_family == "Debian"

- name: Get Docker repository GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/keyrings/docker.asc
  when:
    - ansible_os_family == "Debian"

- name: Set read permissions on docker.asc
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.asc
    owner: root
    group: root
    mode: u+r,g+r,o+r
  when:
    - ansible_os_family == "Debian"

- name: Add Docker repository
  block:
    - name: Add docker repository (Debian)
      ansible.builtin.apt_repository:
        filename: docker-ce
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
      when:
        - ansible_os_family == "Debian"
    - name: Add docker repository (RHEL)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: '644'
      when:
        - ansible_os_family == "RedHat"

- name: Add Kubernetes repository
  block:
    - name: Add docker repository (Debian)
      ansible.builtin.apt_repository:
        filename: docker-ce
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
      when:
        - ansible_os_family == "Debian"
    - name: Add k8s.io repository (RHEL)
      ansible.builtin.yum_repository:
        name: kubernetes
        description: k8s.io repository
        baseurl: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/
        gpgcheck: true
        gpgkey: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/repodata/repomd.xml.key
      when:
        - ansible_os_family == "RedHat"

- name: Update repository cache
  ansible.builtin.apt:
    update_cache: yes
  when:
    - ansible_os_family == "Debian"

- name: Install containerd.io
  ansible.builtin.package:
    name: containerd.io
    state: present

- name: Create default config for containerd
  ansible.builtin.shell: |
    if cat /etc/containerd/config.toml | grep 'cri'; then
      containerd config default > /etc/containerd/config.toml
    fi

- name: Enable systemd Cgroup for containerd
  ansible.builtin.shell: |
    if cat /etc/containerd/config.toml | grep 'SystemdCgroup = false'; then
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    fi

- name: Enable and start containerd unit
  ansible.builtin.service:
    name: containerd
    enabled: true
    state: restarted

- name: Install kubeadm and kubelet packages on all nodes
  ansible.builtin.package:
    name:
      - kubeadm
      - kubelet
    state: present

- name: Install kubectl package on master nodes
  ansible.builtin.package:
    name: kubectl
    state: present
  when: ('k8s_main_master' in group_names) or
        ('k8s_other_masters' in group_names) 

- name: Enable kubelet unit
  ansible.builtin.service:
    name: kubelet
    enabled: true